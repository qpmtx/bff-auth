name: "🚀 Release & Publish"

on:
  push:
    branches: [main]
    paths-ignore:
      - CHANGELOG.md

# Minimal global permissions; job-level permissions are set where needed
permissions:
  contents: write
  pull-requests: read

env:
  NODE_VERSION: "20"

jobs:
  check-pr-merge:
    name: "🔍 Check PR Merge"
    runs-on: ubuntu-latest

    outputs:
      is-pr-merge: ${{ steps.check.outputs.is-pr-merge }}
      pr-title: ${{ steps.check.outputs.pr-title }}
      pr-labels: ${{ steps.check.outputs.pr-labels }}
      version-type: ${{ steps.version-type.outputs.type }}

    steps:
      - name: "🔍 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Check if push is from merged PR"
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" == *"Merge pull request"* ]] || [[ "$COMMIT_MSG" == *"#"* ]]; then
            echo "is-pr-merge=true" >> "$GITHUB_OUTPUT"
            PR_NUM=$(echo "$COMMIT_MSG" | grep -oE '#[0-9]+' | head -1 | tr -d '#')
            echo "PR Number: $PR_NUM"

            if [ -n "$PR_NUM" ]; then
              PR_DATA=$(gh pr view "$PR_NUM" --json title,labels --jq '{title: .title, labels: [.labels[].name]}')
              echo "pr-title=$(echo "$PR_DATA" | jq -r '.title')"  >> "$GITHUB_OUTPUT"
              echo "pr-labels=$(echo "$PR_DATA" | jq -r '.labels | join(",")')" >> "$GITHUB_OUTPUT"
            else
              echo "pr-title=$COMMIT_MSG" >> "$GITHUB_OUTPUT"
              echo "pr-labels="          >> "$GITHUB_OUTPUT"
            fi
          else
            echo "is-pr-merge=false" >> "$GITHUB_OUTPUT"
          fi

      - name: "🏷️ Determine version bump type"
        id: version-type
        run: |
          PR_TITLE="${{ steps.check.outputs.pr-title }}"
          PR_LABELS="${{ steps.check.outputs.pr-labels }}"
          VERSION_TYPE="patch"

          if   [[ "$PR_LABELS" == *"major"* ]]   || [[ "$PR_LABELS" == *"breaking"* ]]; then VERSION_TYPE="major"
          elif [[ "$PR_LABELS" == *"minor"* ]]   || [[ "$PR_LABELS" == *"feature"*  ]]; then VERSION_TYPE="minor"
          elif [[ "$PR_LABELS" == *"patch"* ]]   || [[ "$PR_LABELS" == *"fix"*     ]]; then VERSION_TYPE="patch"
          elif [[ "$PR_TITLE"  == *"BREAKING"* ]]|| [[ "$PR_TITLE"  == *"!"*       ]]; then VERSION_TYPE="major"
          elif [[ "$PR_TITLE"  == feat* ]]       || [[ "$PR_TITLE"  == "✨"*       ]]; then VERSION_TYPE="minor"
          elif [[ "$PR_TITLE"  == fix*  ]]       || [[ "$PR_TITLE"  == "🐛"*       ]]; then VERSION_TYPE="patch"
          fi

          echo "type=$VERSION_TYPE" >> "$GITHUB_OUTPUT"

  release:
    name: "🚀 Release & Publish to npm"
    runs-on: ubuntu-latest
    needs: check-pr-merge
    if: needs.check-pr-merge.outputs.is-pr-merge == 'true'

    # Required for creating GitHub releases
    permissions:
      contents: write

    steps:
      - name: "🔍 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v2
        with:
          version: 10.13.1

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org
          always-auth: true
          cache: pnpm

      - name: "📥 Install dependencies"
        run: pnpm install --no-frozen-lockfile

      - name: "🧪 Test & build"
        run: |
          pnpm test
          pnpm build

      - name: "🔧 Configure Git"
        run: |
          git config --local user.email "qpmtx@qpmatrix.com"
          git config --local user.name  "QPMTX Action"

      - name: "📈 Get current version"
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

      - name: "🏷️ Bump version"
        id: bump-version
        run: |
          VERSION_TYPE="${{ needs.check-pr-merge.outputs.version-type }}"
          NEW_VERSION=$(npm version "$VERSION_TYPE" --no-git-tag-version)
          echo "new=${NEW_VERSION#v}" >> "$GITHUB_OUTPUT"

      # Make sure the first publish of a scoped package is public
      - name: "📝 Ensure public access for scoped package"
        run: |
          node <<'NODE'
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          pkg.publishConfig = { ...(pkg.publishConfig ?? {}), access: 'public' };
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          NODE

      - name: "🏗️ Build package (post-bump)"
        run: pnpm build

      - name: "🔍 Verify npm authentication"
        run: |
          echo "Verifying npm authentication..."
          npm whoami
          echo "✅ NPM authentication successful"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "📄 Generate changelog entry"
        id: changelog
        env:
          PR_TITLE: ${{ needs.check-pr-merge.outputs.pr-title }}
          VERSION_TYPE: ${{ needs.check-pr-merge.outputs.version-type }}
        run: |
          cat > entry.md <<EOF
          - ${PR_TITLE}
          EOF

          if [ -f CHANGELOG.md ]; then
            awk 'NR==1 {print; print ""; while(getline < "entry.md") print; next}1' CHANGELOG.md > tmp && mv tmp CHANGELOG.md
          else
            printf "# Changelog\n\n" > CHANGELOG.md
            cat entry.md >> CHANGELOG.md
          fi

      - name: "💾 Commit version & changelog"
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new }}"
          git add package.json CHANGELOG.md
          git commit -m "chore(release): v${NEW_VERSION} [skip ci]"

      - name: "🏷️ Create tag"
        id: create-tag
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new }}"
          TAG="qpmtx-nestjs-auth-v${NEW_VERSION}"
          git tag -a "$TAG" -m "Release $TAG"
          echo "tag-name=$TAG" >> "$GITHUB_OUTPUT"

      - name: "📤 Push changes & tags"
        run: git push --follow-tags origin main

      - name: "📦 Publish to npm"
        run: |
          echo "Publishing @qpmtx/nestjs-auth@${{ steps.bump-version.outputs.new }} to npm..."
          npm publish --access public
          echo "✅ Package published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "✅ Verify npm publish"
        run: |
          echo "Verifying package was published..."
          sleep 10  # Wait for npm registry to sync
          npm view @qpmtx/nestjs-auth@${{ steps.bump-version.outputs.new }}
          echo "✅ Package verification successful!"

      - name: "📋 Create GitHub Release"
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create-tag.outputs.tag-name }}
          name: "🚀 Release v${{ steps.bump-version.outputs.new }}"
          body: |
            ## 📦 What's New

            - ${{ needs.check-pr-merge.outputs.pr-title }}

            ## 📥 Installation

            ```bash
            npm install @qpmtx/nestjs-auth@${{ steps.bump-version.outputs.new }}
            # or
            pnpm add @qpmtx/nestjs-auth@${{ steps.bump-version.outputs.new }}
            # or
            yarn add @qpmtx/nestjs-auth@${{ steps.bump-version.outputs.new }}
            ```

            ## 🔗 Links

            - 📦 [NPM Package](https://www.npmjs.com/package/@qpmtx/nestjs-auth)
            - 📚 [Documentation](https://github.com/qpmtx/nestjs-auth#readme)
            - 🐛 [Report Issues](https://github.com/qpmtx/nestjs-auth/issues)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "📊 Summary"
        run: |
          echo "### ✅ Released v${{ steps.bump-version.outputs.new }} to npm" >> "$GITHUB_STEP_SUMMARY"
          echo "🔗 **Package**: https://www.npmjs.com/package/@qpmtx/nestjs-auth" >> "$GITHUB_STEP_SUMMARY"
          echo "📦 **Version**: v${{ steps.bump-version.outputs.new }}" >> "$GITHUB_STEP_SUMMARY"
          echo "🏷️ **Tag**: ${{ steps.create-tag.outputs.tag-name }}" >> "$GITHUB_STEP_SUMMARY"
